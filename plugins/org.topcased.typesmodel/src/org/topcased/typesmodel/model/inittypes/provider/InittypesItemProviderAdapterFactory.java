/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.topcased.typesmodel.model.inittypes.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.topcased.typesmodel.model.inittypes.util.InittypesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InittypesItemProviderAdapterFactory extends InittypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
    /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public InittypesItemProviderAdapterFactory()
    {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

    /**
	 * This keeps track of the one adapter used for all {@link org.topcased.typesmodel.model.inittypes.TypeModel} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected TypeModelItemProvider typeModelItemProvider;

    /**
	 * This creates an adapter for a {@link org.topcased.typesmodel.model.inittypes.TypeModel}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createTypeModelAdapter()
    {
		if (typeModelItemProvider == null) {
			typeModelItemProvider = new TypeModelItemProvider(this);
		}

		return typeModelItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link org.topcased.typesmodel.model.inittypes.Regex} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected RegexItemProvider regexItemProvider;

    /**
	 * This creates an adapter for a {@link org.topcased.typesmodel.model.inittypes.Regex}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createRegexAdapter()
    {
		if (regexItemProvider == null) {
			regexItemProvider = new RegexItemProvider(this);
		}

		return regexItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link org.topcased.typesmodel.model.inittypes.Column} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ColumnItemProvider columnItemProvider;

    /**
	 * This creates an adapter for a {@link org.topcased.typesmodel.model.inittypes.Column}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createColumnAdapter()
    {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link org.topcased.typesmodel.model.inittypes.DocumentType} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected DocumentTypeItemProvider documentTypeItemProvider;

    /**
	 * This creates an adapter for a {@link org.topcased.typesmodel.model.inittypes.DocumentType}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createDocumentTypeAdapter()
    {
		if (documentTypeItemProvider == null) {
			documentTypeItemProvider = new DocumentTypeItemProvider(this);
		}

		return documentTypeItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link org.topcased.typesmodel.model.inittypes.Style} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected StyleItemProvider styleItemProvider;

    /**
	 * This creates an adapter for a {@link org.topcased.typesmodel.model.inittypes.Style}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createStyleAdapter()
    {
		if (styleItemProvider == null) {
			styleItemProvider = new StyleItemProvider(this);
		}

		return styleItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link org.topcased.typesmodel.model.inittypes.DeletionParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeletionParametersItemProvider deletionParametersItemProvider;

				/**
	 * This creates an adapter for a {@link org.topcased.typesmodel.model.inittypes.DeletionParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeletionParametersAdapter() {
		if (deletionParametersItemProvider == null) {
			deletionParametersItemProvider = new DeletionParametersItemProvider(this);
		}

		return deletionParametersItemProvider;
	}

				/**
	 * This keeps track of the one adapter used for all {@link org.topcased.typesmodel.model.inittypes.DeletionParemeter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeletionParemeterItemProvider deletionParemeterItemProvider;

				/**
	 * This creates an adapter for a {@link org.topcased.typesmodel.model.inittypes.DeletionParemeter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeletionParemeterAdapter() {
		if (deletionParemeterItemProvider == null) {
			deletionParemeterItemProvider = new DeletionParemeterItemProvider(this);
		}

		return deletionParemeterItemProvider;
	}

				/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public ComposeableAdapterFactory getRootAdapterFactory()
    {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

    /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
    {
		this.parentAdapterFactory = parentAdapterFactory;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public boolean isFactoryForType(Object type)
    {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

    /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter adapt(Notifier notifier, Object type)
    {
		return super.adapt(notifier, this);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Object adapt(Object object, Object type)
    {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

    /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void addListener(INotifyChangedListener notifyChangedListener)
    {
		changeNotifier.addListener(notifyChangedListener);
	}

    /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void removeListener(INotifyChangedListener notifyChangedListener)
    {
		changeNotifier.removeListener(notifyChangedListener);
	}

    /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void fireNotifyChanged(Notification notification)
    {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

    /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void dispose()
    {
		if (typeModelItemProvider != null) typeModelItemProvider.dispose();
		if (regexItemProvider != null) regexItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (documentTypeItemProvider != null) documentTypeItemProvider.dispose();
		if (styleItemProvider != null) styleItemProvider.dispose();
		if (deletionParametersItemProvider != null) deletionParametersItemProvider.dispose();
		if (deletionParemeterItemProvider != null) deletionParemeterItemProvider.dispose();
	}

}
