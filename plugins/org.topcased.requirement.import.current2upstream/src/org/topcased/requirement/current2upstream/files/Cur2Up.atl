--/*****************************************************************************
-- * Copyright (c) 2012 Atos.
-- *
-- * All rights reserved. This program and the accompanying materials
-- * are made available under the terms of the Eclipse Public License v1.0
-- * which accompanies this distribution, and is available at
-- * http://www.eclipse.org/legal/epl-v10.html
-- *
-- * Contributors:
-- *     Matthieu Boivineau - Initial API and implementation
-- *    
-- ******************************************************************************/
-- @nsURI RequirementModel=http://org.topcased.requirement/1.0
-- @nsURI UMLModel=http://www.eclipse.org/uml2/3.0.0/UML
-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore

module CurModel2UpModel;
create OUT : RequirementModel from IN : RequirementModel;


--------
---rules
--------

---matched rule RequirementProject to Document
rule ruleReqProject2ReqProject { 	
	from
	i : RequirementModel!RequirementProject---(
	---i.oclIsTypeOf(RequirementModel!RequirementProject))
	to
	out : RequirementModel!UpstreamModel (
		---documents <- Sequence{out1}->union(i.chapter->select(c | c.oclIsTypeOf(RequirementModel!TrashChapter)))
		documents <- out1
	),
	out1 : RequirementModel!Document (
		ident <- 'SRD_'+i.hierarchicalElement->first().getText,
		children <- i.hierarchicalElement->collect(tmp | tmp.children)
	)
}

---matched rule Section to RequirementProject
rule ruleHierarchicalElt2Section {
	from
	i : RequirementModel!HierarchicalElement (
	i.oclIsTypeOf(RequirementModel!HierarchicalElement)
	)
	to
	out1 : RequirementModel!Section(
		---ident<- i.element.name
		ident<- i.getText,
		children <- i.requirement
		)
	do {		
		out1.parent<-thisModule.resolveTemp(i.eContainer(), 'out1');
	}
}

---matched rule TrashChapter to Section
rule ruleTrashChapter2Section {
	from
		s : RequirementModel!TrashChapter
	to 
	out :  RequirementModel!Section (
		ident <- 'Trash chapter',
		children <-s.requirement
	)
	do {
		out.parent<-thisModule.resolveTemp(s.eContainer(), 'out1');
	}
}

---matched rule CurrentRequirement to Requirement
rule ruleRequirement {
	from 
	i : RequirementModel!CurrentRequirement (
	i.oclIsTypeOf(RequirementModel!CurrentRequirement)	
	) 
	to
	out : RequirementModel!"ttm::Requirement" (
		ident <- i.identifier,
		shortDescription <- i.shortDescription
		),	
	out2 : RequirementModel!"ttm::Text" (
		value <- i.shortDescription,
		parent <- out
		)
}

---matched rule TextAttribute to Attribute
rule ruleTextAttribute {
	from 
	i : RequirementModel!TextAttribute (
	i.oclIsTypeOf(RequirementModel!TextAttribute)	
	) 
	to
	out : RequirementModel!"ttm::Attribute" (
		name <- i.name,
		value <- i.value
		)	
	do {
		out.parent<-thisModule.resolveTemp(i.eContainer(), 'out');
	}
}

---matched rule ObjectAttribute to Attribute
rule ruleObjectAttribute {
	from 
	i : RequirementModel!ObjectAttribute (
	i.oclIsTypeOf(RequirementModel!ObjectAttribute) and not i.value.oclIsTypeOf(RequirementModel!CurrentRequirement)	
	) 
	to
	out : RequirementModel!"ttm::Attribute" (
		name <- i.name,
		value <- if i.value.oclIsUndefined() then '' else i.value.identifier endif
		)	
	do {
		out.parent<-thisModule.resolveTemp(i.eContainer(), 'out');
	}
}

rule ruleObjectAttribute2 {
	from 
	i : RequirementModel!ObjectAttribute (
	i.oclIsTypeOf(RequirementModel!ObjectAttribute)	and i.value.oclIsTypeOf(RequirementModel!CurrentRequirement)	
	) 
	to
	out : RequirementModel!"ttm::Attribute" (
		name <- '<- '+i.name,
		value <- i.eContainer().eContainer().getText
		),	
	out2 : RequirementModel!"ttm::Attribute" (
		name <- i.name,
		value <- if i.value.oclIsUndefined() then '' else i.value.identifier endif
		)	
	do {
		out.parent<-thisModule.resolveTemp(i.value, 'out');
		out2.parent<- thisModule.resolveTemp(i.eContainer(), 'out');
	}
}


helper context RequirementModel!HierarchicalElement def : getText : String = 
	let seq : Sequence(Ecore!EStructuralFeature) = self.element.eClass().eAllStructuralFeatures->select(e  | e.name = 'name' or e.name = 'id')
	in 
	if (seq->notEmpty()) then
		self.element.eGet(seq->first())
	else
		''
	endif
	;